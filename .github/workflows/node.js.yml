name: Node.js CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Set environment variables
        run: |
          echo "PORT=${{ secrets.PORT }}" >> $GITHUB_ENV
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASS=${{ secrets.DB_PASS }}" >> $GITHUB_ENV
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> $GITHUB_ENV

      - run: npm ci --legacy-peer-deps
      - run: npm run test
      - run: npm run test:e2e

      - name: Build the project
        run: |
          npm install -g @nestjs/cli@10.4.2
          npm run build

      - name: Install serverless
        run: npm install -g serverless@3.x

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Wait for CloudFormation stack to be stable before deploying
        id: wait_stack_stable
        run: |
          STACK_NAME=nestjs-typescript-challenge-main
          while true; do
            aws cloudformation describe-stacks --stack-name $STACK_NAME --output text > /dev/null 2>&1
            if [ $? -ne 0 ]; then
              echo "Stack does not exist."
              break
            fi
            STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].StackStatus' --output text)
            echo "Current stack status: $STACK_STATUS"
            if [[ "$STACK_STATUS" == "CREATE_COMPLETE" || "$STACK_STATUS" == "UPDATE_COMPLETE" || "$STACK_STATUS" == "UPDATE_ROLLBACK_COMPLETE" || "$STACK_STATUS" == "ROLLBACK_COMPLETE" || "$STACK_STATUS" == "DELETE_COMPLETE" ]]; then
              break
            elif [[ "$STACK_STATUS" == "UPDATE_IN_PROGRESS" || "$STACK_STATUS" == "CREATE_IN_PROGRESS" || "$STACK_STATUS" == "ROLLBACK_IN_PROGRESS" || "$STACK_STATUS" == "DELETE_IN_PROGRESS" ]]; then
              echo "Stack is in a transient state, waiting..."
              sleep 20
            else
              echo "Stack is in an unexpected state: $STACK_STATUS"
              exit 1
            fi
          done

      - name: Deploy with Serverless
        run: serverless deploy --stage main
