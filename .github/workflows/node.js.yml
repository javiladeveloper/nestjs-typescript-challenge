name: Node.js CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set environment variables
      run: |
        echo "PORT=3000" >> $GITHUB_ENV
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV
        echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
        echo "DB_PASS=${{ secrets.DB_PASS }}" >> $GITHUB_ENV
        echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> $GITHUB_ENV
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npm run test

    - name: Run e2e tests
      run: npm run test:e2e

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - uses: actions/checkout@v3

    - name: Set environment variables
      run: |
        echo "PORT=3000" >> $GITHUB_ENV
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV
        echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
        echo "DB_PASS=${{ secrets.DB_PASS }}" >> $GITHUB_ENV
        echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16.x'

    - name: Install dependencies
      run: npm install

    - name: Deploy to AWS Lambda
      run: |
        FUNCTION_NAME="RBAC-challenge"
        ZIP_FILE="function.zip"
        
        # Zip the function code
        zip -r $ZIP_FILE .

        # Check if the function exists
        if aws lambda get-function --function-name $FUNCTION_NAME; then
          # If the function exists, update the code
          aws lambda update-function-code --function-name $FUNCTION_NAME --zip-file fileb://$ZIP_FILE
        else
          # If the function does not exist, create it
          aws lambda create-function \
            --function-name $FUNCTION_NAME \
            --runtime nodejs16.x \
            --role arn:aws:iam::<your-account-id>:role/<your-lambda-role> \
            --handler index.handler \
            --zip-file fileb://$ZIP_FILE
        fi
